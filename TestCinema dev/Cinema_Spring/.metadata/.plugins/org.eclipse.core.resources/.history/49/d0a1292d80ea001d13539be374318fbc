package fr.inti.service;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import fr.inti.dao.ISalleRepo;
//import fr.inti.dao.SalleRepo;
import fr.inti.modele.Film;
import fr.inti.modele.Salle;
import fr.inti.modele.Seance;

@Service
public class SalleService implements ISalleService {

	@Autowired
	private ISalleRepo salleRepo;
	
//	@Autowired
//	private SalleRepo sRepo;
	
	@Override
	public Salle create(Salle salle){
		return salleRepo.save(salle);
	}
	
	@Override
	public List<Salle> getAllSalles(){
		return salleRepo.findAll();
	}
	
	@Override
	public Salle getTechno(String techno){
		return salleRepo.findByTechno(techno);
	}
	
	@Override
	public void deleteById(Long id) {
		salleRepo.deleteById(id);
	}
	
	@Override
	public Salle updateSalleById(Long id,Salle salle){
		return salleRepo.save(salle);
	}

	@Override
	public Salle getId(Long id) {
		return salleRepo.getSalleById(id);
	}
	
	@Override
	public List<Seance> getlisteSeancesById(Long id) {
		return salleRepo.getlisteSeancesById(id);
	}

	public boolean verifConflitsListe(List<Seance> listeSeances, LocalTime heureDebut, LocalTime dureeFilm, LocalDate date) {
	    // conversion de la durée du film en minutes
		long dureeEnMinutes = dureeFilm.getHour() * 60 + dureeFilm.getMinute(); 
	    // calcul de l'heure de fin de la séance
		LocalTime heureFin = heureDebut.plusMinutes(dureeEnMinutes); 
	    for (Seance seance : listeSeances) {
	        if (seance.getDate().equals(date)) {
	            LocalTime seanceDebut = seance.getHeure();
	            long seanceDuree = seance.getFilm().getDuree().getHour() * 60 + seance.getFilm().getDuree().getMinute();
	            LocalTime seanceFin = seanceDebut.plusMinutes(seanceDuree);
	            if (heureDebut.isBefore(seanceFin) && seanceDebut.isBefore(heureFin)) {
	                return true; // il y a conflit
	            }
	        }
	    }
	    return false; // il n'y a pas de conflit
	}

	public List<Seance> ajouterSeance(Long id, Seance seance) {
	    Optional<Salle> salle = salleRepo.findById(id);
	    
	    List<Seance> listeSeances = salle.getListeSeances();
	    if (verifConflitsListe(listeSeances, seance)) {
	        throw new Exception("La séance se superpose avec une séance existante.");
	    }
	    seance.setSalle(salle);
	    seanceRepo.save(seance);
	    listeSeances.add(seance);
	    salle.setListeSeances(listeSeances);
	    salleRepo.save(salle);
	    return listeSeances;
	}

//	// récupérer la liste des films d'une salle
//	@Override
//	public List<Film> findFilmsBySalleId(Long salleId) {
//		return salleRepo.findFilmsBySalleId(salleId);
//	}
//
//	// ajouter un film à une salle
//	@Override
//	public void addFilmToSalle(Long salleId, Long filmId) {
//		sRepo.addFilmToSalle(salleId, filmId);
//	}
//
//	// supprimer un film d'une salle
//	@Override
//	public void suppFilmToSalle(Long salleId, Long filmId) {
//		sRepo.suppFilmToSalle(salleId, filmId);
//	}

	

}




